// Generated by CoffeeScript 1.6.3
(function() {
  var CHANNEL, COMMANDS_TO_REPLICATE, COMMANDS_TO_REPLICATE_MAP, PUBNUB, REDIS_ADDR, REDIS_HOST, REDIS_PORT, asString, pubnub, redisSync, sync, _;

  PUBNUB = require('../deps/pubnub-javascript/node.js/pubnub.js');

  redisSync = require('../deps/redis-sync/redis-sync.js');

  _ = require('../deps/underscore/underscore.js');

  pubnub = PUBNUB.init({
    subscribe_key: 'demo',
    publish_key: 'demo'
  });

  REDIS_ADDR = (process.argv[2] || 'localhost:6379').split(":");

  REDIS_HOST = REDIS_ADDR[0];

  REDIS_PORT = REDIS_ADDR[1];

  CHANNEL = process.argv[3];

  COMMANDS_TO_REPLICATE = ['set', 'mset', 'del', 'persist', 'rename', 'incr', 'incrby', 'decr', 'decrby', 'expire', 'expireat', 'pexpire', 'pexpireat', 'append'];

  COMMANDS_TO_REPLICATE_MAP = _(COMMANDS_TO_REPLICATE).reduce(function(a, x) {
    a[x] = true;
    return a;
  }, {});

  asString = function(e) {
    return _.map(e, function(x) {
      return x.toString();
    });
  };

  sync = new redisSync.Sync();

  sync.on('rdb', function(rdb) {
    console.log('starting RDB transfer');
    rdb.on('error', function(err) {
      return console.error('ERROR!', err);
    });
    return rdb.on('end', function() {
      return console.log('end of RDB');
    });
  });

  sync.on('entity', function(e) {
    var entity;
    entity = asString(e);
    console.log('Publishing entity:', JSON.stringify(entity));
    return pubnub.publish({
      channel: CHANNEL,
      message: {
        type: 'entity',
        uuid: pubnub.uuid(),
        entity: entity
      }
    });
  });

  sync.on('command', function(command, args) {
    var entity, payload;
    entity = asString(args);
    if (COMMANDS_TO_REPLICATE_MAP[command]) {
      payload = {
        channel: CHANNEL,
        message: {
          type: 'command',
          uuid: pubnub.uuid(),
          command: command,
          args: entity
        }
      };
      console.log('Publishing command:', JSON.stringify(payload));
      return pubnub.publish(payload);
    } else {
      return console.log('Not publishing command:', JSON.stringify({
        command: command,
        args: entity
      }));
    }
  });

  sync.on('inlineCommand', function(buffers) {
    return console.log('inline command (not published)', buffers.toString());
  });

  sync.on('error', function(err) {
    return console.error('ERROR!', err);
  });

  console.log("Replicating from Redis host " + REDIS_ADDR + " to PubNub channel \#" + CHANNEL);

  sync.connect(REDIS_PORT, REDIS_HOST);

}).call(this);
